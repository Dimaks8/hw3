import warnings 
warnings.filterwarnings('ignore')
import os 
import librosa 
import numpy 
import soundfile 

import tqdm 
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed

def extact_mfcc_worker(node, path_to_result_folder, rel_path): 
	path_to_result = "{}/{}".format(path_to_result_folder, rel_path) 
	os.makedirs("{}/{}".format(path_to_result_folder, rel_path), exist_ok=True) 
	for f in node[2]: 
		adio_series, rate = librosa.core.load('{}/{}'.format(node[0], f)) 
		mfcc_features = librosa.feature.mfcc(adio_series, rate) 
		numpy.savetxt("{}/{}.csv".format(path_to_result, f), mfcc_features, delimiter=",")
def extract_mfcc(path_to_start_folder, path_to_result_folder): 
	tree = tqdm(os.walk(path_to_start_folder)) 
	for node in tree: 
		rel_path = os.path.relpath(node[0]) 
		if node[2]: 
			extact_mfcc_worker(node, path_to_result_folder, rel_path)
def extract_mfcc_processes(path_to_start_folder, path_to_result_folder, num_proc=8): 
	tree = tqdm(os.walk(path_to_start_folder)) 
	with ProcessPoolExecutor(max_workers=num_proc) as pool: 
		for node in tree: 
			rel_path = os.path.relpath(node[0]) 
			if node[2]: 
				pool.submit(extact_mfcc_worker, node, path_to_result_folder, rel_path)
def extract_mfcc_threads(path_to_start_folder, path_to_result_folder, num_threads=8): 
	tree = tqdm(os.walk(path_to_start_folder)) 
	with ThreadPoolExecutor(max_workers=num_threads) as pool: 
		for node in tree: 
			rel_path = os.path.relpath(node[0]) 
			if node[2]: 
				pool.submit(extact_mfcc_worker, node, path_to_result_folder, rel_path)

extract_mfcc_processes("aac", "result_proc")
