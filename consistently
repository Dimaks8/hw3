import warnings
warnings.filterwarnings('ignore')

import os
import librosa
import numpy
import soundfile
import tqdm
from concurrent.futures import ProcessPoolExecutor, ThreadPoolExecutor, as_completed


def base_extract(node, path_desired, rel): 
	path = "{}/{}".format(path_desired, rel) 
	os.makedirs("{}/{}".format(path_desired, rel), exist_ok=True) 
	for k in node[2]: 
		adio_series, rate = librosa.core.load('{}/{}'.format(node[0], k)) 
		mfcc_features = librosa.feature.mfcc(adio_series, rate) 
		numpy.savetxt("{}/{}.csv".format(path, k), mfcc_features, delimiter=",")
		
def extract_mfcc_consistently(start_path, path_desired): 
	tree = tqdm(os.walk(start_path)) 
	for node in tree: 
		rel = os.path.relpath(node[0]) 
		if node[2]: 
			base_extact(node, path_desired, rel)
			
			
extract_mfcc("aac", "result")
